setinverse <- function(inverse) m1 <<- inverse
getinverse <- function() m1
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(c(4, 7, 9, 5))
my_matrix
my_matrix$get()
x1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow =2, ncol = 2)
x1
makeCacheMatrix(x1)
my_matrix <- makeCacheMatrix(x1)
my_matrix$get()
my_matrix <- makeCacheMatrix(c(5,4,9,10), nrow = 2, ncol = 2)
my_matrix <- makeCacheMatrix(c(5,4,9,10))
my_matrix$get()
my_matrix$set(x1)
my_matrix$get()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()){
x <- NULL
set <- function(y) {
x <<- y
x1 <<- NULL
}
get <- function() x
setinverse <- function(inverse) x1 <<- inverse
getinverse <- function() x1
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_vector <- makeCacheMatrix(c(5,8,9,25))
my_vector$get()
my_vector$set(5,10,25,35,4,3,5,9,4)
my_vector$set(c(5,10,25,35,4,3,5,9,4)
)
my_vector$get()
my_matrix <- makeCacheMatrix()
my_matrix$set(c(1,2,3,4,5,6,7,8,9))
my_matrix$get()
x5 <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)
x5
my_matrix$set(x5)
my_matrix$get()
cacheSolve <- function(x, ...) {
x1 <- x$getinverse()
if(!is.null(m1)) {
message("getting cached matrix")
return(m1)
}
data <- x$get()
x1 <- solve(data, ...)
x$setinverse(x1)
x1
## Return a matrix that is the inverse of 'x'
}
cacheSolve(my_matrix)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()){
x <- NULL
set <- function(y) {
x <<- y
x1 <<- NULL
}
get <- function() x
setinverse <- function(inverse) x1 <<- inverse
getinverse <- function() x1
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeCacheMatrix(c(4,5,9,2), nrow =2, ncol = 2)
makeCacheMatrix(c(4,5,9,2))
test <- makeCacheMatrix(c(4,5,9,2))
test$get()
makeCacheMatrix <- function(x = matrix()) {
x1 <- NULL
set <- function(y) {
x <<- y
x1 <<- NULL
}
}
t <- makeCacheMatrix(c(4,5,6,8))
t
makeCacheMatrix <- function(x = matrix()) {
x1 <- NULL
set <- function(y) {
x <<- y
x1 <<- NULL
}
get <- function() x
setinverse <- function(inverse) x1 <<- inverse
getinverse <- function() x1
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cacheSolve <- function(x, ...) {
x1 <- x$getinverse()
if(is.null(x1)) {
message("getting cached matrix")
return(x1)
}
data <- x$get()
x1 <- solve(data, ...)
x$setinverse(x1)
## Return a matrix that is the inverse of 'x'
}
matrix1 <- matrix(c(2, 4, 6, 8), nrow = 2, ncol = 2)
matrix1
matrix2 <- makeCacheMatrix(matrix1)
makeCacheMatrix <- function(x = matrix()) {
x1 <- NULL
set <- function(y) {
x <<- y
x1 <<- NULL
}
get <- function() x
setinverse <- function(inverse) x1 <<- inverse
getinverse <- function() x1
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
matrix2 <- makeCacheMatrix(matrix1)
matrix2
cacheSolve(matrix2)
matrix1
matrix2 <- makeCacheMatrix(matrix1)
matrix2$get()
cacheSolve(matrix2)
matrix2$getinverse()
cacheSolve <- function(x, ...) {
x1 <- x$getinverse()
if(!is.null(x1)) {
message("getting cached matrix")
return(x1)
}
data <- x$get()
x1 <- solve(data, ...)
x$setinverse(x1)
## Return a matrix that is the inverse of 'x'
}
cacheSolve(matrix2)
matrix2$getinverse()
new_matrix <- matrix(c(5, 10, 15, 20, 25, 30, 35, 40, 45), nrow = 3, n col = 3)
new_matrix <- matrix(c(5, 10, 15, 20, 25, 30, 35, 40, 45), nrow = 3, ncol = 3)
new_matrix
test2 <- makeCacheMatrix(new_matrix)
test2
test2$get()
test2$getinverse()
cacheSolve(test2)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol =2)
m1
m2 <- makeCacheMatrix(m1)
m2
cacheSolve(m2)
m2$getinverse()
A <- matrix(c(1, 0, 1, 0, 2, 1, 1, 1, 1), nrow = 3, ncol = 3)
A
A1 <- makeCacheMatrix(A)
A1$get()
A1$getinverse()
cacheSolve(A1)
A1$getinverse()
cacheSolve(A1)
matrix1
matrix2 <- makeCacheMatrix(matrix1)
matrix2$get()
matrix2$getinverse()
h5 <- makeCacheMatrix(matrix(c(2, 4, 6, 8), nrow = 2, ncol = 2))
h5
h5$get()
cacheSolve(h5)
h5$getinverse()
}
## cachesolve takes the object returned by makeCacheMatrix as the argument.
## If the value of the inverse matrix(x1) is NULL cacheSolve will calculate
## the inverse matrix and cache it in the makeCacheMatrix object using the
## setinverse() function. If the getinverse() function returns a matrix then
## the function simply returns the value of x1 stored in the makeCachematrix object.
cacheSolve <- function(x, ...) {
x1 <- x$getinverse()
if(!is.null(x1)) {
message("getting cached matrix")
return(x1)
}
data <- x$get()
x1 <- solve(data, ...)
x$setinverse(x1)
## Return a matrix that is the inverse of 'x'
}
## This file contains two functions whose overall purpose is to store a matrix in an object,
## compute the inverse of that matrix and cache it in the object for future reference.
## This funcion takes a matrix "x" as the argument and returns an object
#  containing a list of four functions and the variables x(original matrix) and x1(inverse matrix)
#
makeCacheMatrix <- function(x = matrix()) {
x1 <- NULL
set <- function(y) {
x <<- y
x1 <<- NULL
}
get <- function() x
setinverse <- function(inverse) x1 <<- inverse
getinverse <- function() x1
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cachesolve takes the object returned by makeCacheMatrix as the argument.
## If the value of the inverse matrix(x1) is NULL cacheSolve will calculate
## the inverse matrix and cache it in the makeCacheMatrix object using the
## setinverse() function. If the getinverse() function returns a matrix then
## the function simply returns the value of x1 stored in the makeCachematrix object.
cacheSolve <- function(x, ...) {
x1 <- x$getinverse()
if(!is.null(x1)) {
message("getting cached matrix")
return(x1)
}
data <- x$get()
x1 <- solve(data, ...)
x$setinverse(x1)
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(matrix(c(4,5,8,9), nrow = 2, ncol = 2))
j <- makeCacheMatrix(matrix(c(4,5,8,9), nrow = 2, ncol = 2))
j$get()
my_data <- data.frame()
i <- 0
while(i <= 200){
Orlando <- 40
Miami <- 38
Hornets <- 38
## Hornets <- Hornets + rbinom(1, 1, 0.3)
#game 8
Hornets <- Hornets + rbinom(1, 1, 0.7)
Miami <- Miami + rbinom(1, 1, 0.1)
Orlando <- Orlando + rbinom(1, 1, 0.2)
#game 9
x2 <- rbinom(1, 1, 0.6)
Hornets <- Hornets + x2
Orlando <- Orlando + abs(x2-1)
Miami <- Miami + rbinom(1, 1, 0.6)
#game 10
Miami <- Miami + rbinom(1, 1, 0.35)
i <- i + 1
v <- c(Orlando, Miami, Hornets)
my_data <- rbind(my_data, v)
names(my_data)[1] <- "Orlando"
names(my_data)[2] <- "Miami"
names(my_data)[3] <- "Hornets"
}
my_data
subset(my_data, Horets==40)
subset(my_data, Hornets==40)
Charlotte <- subset(my_data, Hornets==40)
Charlotte
nrow(Charlotte)
wins <- subset(Charlotte, Orlando<41)
wins
nrow(wins)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r-arch:country)
select(cran, r-arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time
)
select(cran, -X:size)
select(cran, -5:20)
skip()
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size >100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
by_package
?n
skip()
pack_sum
qantile(pack_sum$count$count, probs = 0.99)
quantile(pack_sum$count$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique)
)
View()
view(top_unique_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
?Devices
skip()
skip()
dev.cur()
pdf(file="myplot.pdf")
skip()
skip()
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
skip()
?dev.copy
dev.copy(png, file("geyserplot.png"))
skip()
dev.off()
head(cars)
with(car, plot(speed, distance))
with(cars, plot(speed, distance))
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
?xyplot
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Month, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
dev.cur()
dev.off
dev.off()
windows()
dev.cur()
swirl()
table(airquality$Month)
boxplot(Ozone~Month, airquality)
skip()
title(main = "Ozone and Wind in New York City")
with(airquality, plot(wind, ozone))
with(airquality, plot(Wind, Ozone))
skip()
par()
length(par)
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- airquality[airquality$Month=="5",]
may
skip()
?plot
?points
pch = 0:18
with(may, points(Wind, Ozone, pch = "17", col="blue"))
with(may, points(Wind, Ozone, pch=17, col="blue"))
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!="5")
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, pch=8, col="red")
skip()
skip()
skip()
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
skip()
skip()
skip()
skip()
skip()
skip()
dir()
getwd()
setwd("C:/Users/weygang/Downloads/exdata_data_household_power_consumption")
dir()
path <- dir()
power <- read.table(path)
str(power)
head(power)
?read.table()
power <- read.table(path, sep = ";", header = TRUE)
head(power)
str(power)
?as.Date
as.date(power$Date)
as.Date(power$Date)
str(power)
power <- read.table(path, sep = ";", header = TRUE, na.strings = "?")
?read.table
power <- read.table(path, sep = ";", header = TRUE, na.strings = "?", colClasses = "Date"="Date")
power <- read.table(path, sep = ";", header = TRUE, na.strings = "?", colClasses=c("Date"="Date")
)
str(power)
dir()
tail(power)
range(power$Date)
power <- read.table(path, sep = ";", header = TRUE, na.strings = "?")
tail(power)
power2 <- subset(power, Date=="01/02/2007" | "02/02/2007")
power2 <- subset(power, Date=="01/02/2007")
power2 <- subset(power, Date=="01/02/2007" | Date=="02/02/2007")
head(power2)
tail(power2)
>strptime
?strptime
strptime(power$Date)
strptime(power$Date, format = "%d-%m-%Y")
table(power$Date)
View(table(power$Date))
power[power$Date=="01/02/2007"]
power[power$Date=="1/2/2007"]
power[power$Date=="1/2/2007",]
power[power$Date=="1/2/2007" | power$Date=="2/2/2007",]
power2 <- power[power$Date=="1/2/2007" | power$Date=="2/2/2007",]
str(power2)
table(power2$Date)
power2 <- power[power$Date=="1/2/2007",]
table(power2$Date)
subset(power, Date=="1/2/2007")
subset(power, Date=="1/2/2007" | Date=="2/2/2007")
power2 <- subset(power, Date=="1/2/2007" | Date=="2/2/2007")
View(power2)
names(power2)
?hist
with(power2, hist(global_active_power, col = "red"))
with(power2, hist(Global_active_power, col = "red"))
par()
par(mfrow = c(1,1))
with(power2, hist(Global_active_power, col = "red"))
setwd("~/GitHub/ExData_Plotting1")
title(main = "Global Active Power")
?hist
with(power2, hist(Global_active_power, col = "red", main = "Global Active Power"))
?hist
with(power2, hist(Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts"))
with(power2, hist(Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)"))
dev.copy(png, file = "plot1.png")
dev.off()
with(power2, hist(Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)"))
names(power2)
table(power2$Time)
class(power2$Time)
names(power2)
with(power2, plot(Time, Global_active_power))
?plot
with(power2, plot(Time, Global_active_power))
par(xlab = c("Thu", "Fri", "Sat"))
par(lwd=1)
?axis
with(power2, plot(Time, Global_active_power))
axis(labels = c("Thu", "Fri, "Sat""))
axis(labels = c("Thu", "Fri", "Sat""))
)
